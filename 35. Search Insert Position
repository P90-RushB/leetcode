方法一：遍历。当发现nums[i]>=target,返回的就是i。当遍历完还没发现target的位置，说明在原数组的最后，返回nums.Length。复杂度O（n）
public class Solution {
    public int SearchInsert(int[] nums, int target) {
        for(int i=0;i<nums.Length;i++){
            if(nums[i]>=target) return i;
        }
        return nums.Length;
    }
}

//方法二：二分法复杂度logn
二分法原型：
int searchItem(int arr[],int len, int value){  
    int low = 0,high = len-1,mid;  
    while (low <= high) {  
        mid = (low + high)/2;  
        if (value > arr[mid]) {  
            low = mid+1;  
        }else if (value < arr[mid]){  
            high = mid - 1;  
        }else{  
            return mid;  
        }  
    }  
    return -1;  
}


此题：
public class Solution {
    public int SearchInsert(int[] nums, int target) {
        int low=0,high=nums.Length-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
                return mid;
            else if(target<nums[mid])
                high=mid-1;
            else low=mid+1;
        }
        return low ;
        
    }
    
}
