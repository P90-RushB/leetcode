此链接，所有相关的解释：https://www.cnblogs.com/hiddenfox/p/3408931.html


给定一个链表，判断链表中否有环。

补充：
你是否可以不用额外空间解决此题？

此题如果用包里搜索O(n^2)会超时：使用两个指针a, b。a从表头开始一步一步往前走，
遇到null则说明没有环，返回false；a每走一步，b从头开始走，如果遇到b==a.next，则说明有环true，如果遇到b==a，则说明暂时没有环，继续循环。
On的方法：十分的巧妙，但是也是见多就不稀奇：使用两个指针slow,fast。两个指针都从表头开始走，slow每次走一步，fast每次走两步，如果fast遇到null，
则说明没有环，返回false；如果slow==fast，说明有环，并且此时fast超了slow一圈，返回true。
为什么有环的情况下二者一定会相遇呢？因为fast先进入环，
在slow进入之后，如果把slow看作在前面，fast在后面每次循环都向slow靠近1，所以一定会相遇，而不会出现fast直接跳过slow的情况。

On解法：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public bool HasCycle(ListNode head) {
      ListNode slow=head,fast=head;
        while(fast!=null&&fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast)
                return true;
        }
        return false;
    }
}
