首先，如果使用递归，自然是十分简单
public class Solution {
    public IList<int> InorderTraversal(TreeNode root) {
        IList<int> list=new List<int>();
        Inorder(root,list);
        return list;
    }
    public void Inorder(TreeNode root,IList<int> list){
        if(root!=null)
        {
            Inorder(root.left,list);
            list.Add(root.val);
            Inorder(root.right,list);
        }
    }
}

//所以当然要求是不让用递归
迭代方法一：
  public IList<int> InorderTraversal(TreeNode root) {
         IList<int> list=new List<int>();
         Stack<TreeNode> stack=new Stack<TreeNode>();//迭代的中序方法当然就是利用栈了
         TreeNode cur=root;
         while(cur!=null||stack.Count()!=0)//当前节点不为空或者栈不为空时
         {
             if(cur!=null)//若是因为当前节点不为空而没有跳出循环，就继续把当前节点压入栈，然后等于当前的左孩子继续循环
             {
                 stack.Push(cur);
                 cur=cur.left;
             }
             else//说明当前（cur）节点已经为空，没有跳出循环是因为栈不空。则：
             {
                 cur=stack.Pop();//取出栈顶元素
                 list.Add(cur.val);//遍历
                 cur=cur.right;//cur赋值为右孩子
             }
         }
         return list;
     }
迭代方法二
        IList<int> list=new List<int>();
         Stack<TreeNode> stack=new Stack<TreeNode>();
         TreeNode cur=root;
         while(cur!=null||stack.Count()!=0)//当cur节点不为空或者栈不为空时
         {
             while(cur!=null)当cur不为空，一路将左孩子入栈
             {
                 stack.Push(cur);就把cur入栈，然后cur等于cur的左孩子，
                 cur=cur.left;
             }
             cur=stack.Pop();//因为内部循环里一路将左孩子入栈，跳出循环时cur为null了，这时要将cur赋值为最后一次入栈的，也就是最左
             list.Add(cur.val);//处理
             cur=cur.right;//等于其右孩子
         }
         return list;
