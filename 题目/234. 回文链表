请检查一个链表是否为回文链表。

进阶：
你能在 O(n) 的时间和 O(1) 的额外空间中做到吗？

这题如果不限制o1的空间的话，是很好做的，遍历一遍赋值给list，比较是不是回文就行。但是限定了o1的空间后，就不能
这样做了。 需要先用快慢指针找到中点，然后将后半部分链表反转（时间O（n）），然后比较。
对于快慢指针的理解，因为while内是fast.next!=null&&fast.next.next!=null，这样经过试数可以知道，如果链表是偶数个节点，
比如4个，那么最后slow是在第二个节点处；而如果链表是奇数个节点比如5个，那么最后slow是指向第三个节点处，知道这个的意义在于，
不管奇数还是偶数个，后半部分的节点数都不会大于前半部分，所以前后部分对比时，while（后半部分的节点！=null），才是正确搞笑的。
所以反转链表是基本必须要掌握的操作。
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsPalindrome(ListNode head) {
        if(head==null||head.next==null)
            return true;
        ListNode slow=head,fast=head;
        while(fast.next!=null&&fast.next.next!=null)
        {
            fast=fast.next.next;
            slow=slow.next;
        }
        fast=head;
        slow=slow.next;
        slow=reverse(slow);
        while(slow!=null)
        {
            if(fast.val!=slow.val)
                return false;
            slow=slow.next;
            fast=fast.next;
        }
        return true;
    }
    ListNode reverse(ListNode head)
    {
        if(head==null||head.next==null)
            return head;
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode cur=head;
        while(cur.next!=null)
        {
            ListNode tmp=cur.next;
            cur.next=tmp.next;
            tmp.next=dummy.next;
            dummy.next=tmp;
        }
        return dummy.next;
    }
}
