请检查一个链表是否为回文链表。

进阶：
你能在 O(n) 的时间和 O(1) 的额外空间中做到吗？

这题如果不限制o1的空间的话，是很好做的，遍历一遍赋值给list，比较是不是回文就行。但是限定了o1的空间后，就不能
这样做了。 需要先用快慢指针找到中点，然后将后半部分链表反转（时间O（n）），然后比较。

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:

        # 垃圾方法：
        # 方法1，如果可以用o（n）复杂度，只要遍历一次存list，比较即可。
        # res = []
        # tmp = head
        # while tmp:
        #     res.append(tmp.val)
        #     tmp = tmp.next

        # n = len(res)
        # for i in range(n//2):
        #     if res[i] != res[n-1-i]:
        #         return False

        # return True

        # 真正的方法：
        # 方法二，如何用o（n）时间复杂度，o（1）空间复杂度来解决？
        # 先快慢指针锁定中点，然后对后半部分指针翻转链表，然后前半部分和后半部分比较即可。
        fast = slow = head
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        # 遍历完，如何判断是奇数个节点还是偶数个节点举俩例子看看就知道了。
        # 如果是 1 2 3 4 5， 循环两次跳出， slow为3，正中心， fast存在但fast.next为None
        # 如果是1 2 3 4， 循环两次跳出，slow为2， 中心靠左， fast为None。
        # 因此，偶数还是奇数， 看fast就行。
        
        # 如果是偶数个节点，slow已经是中心靠右的那个节点；
        # 如果是奇数个节点，slow目前是中心，要右移一位
        if fast:
            slow = slow.next
        
        # 开始反转右半部分链表。
        pre = None
        second = slow
        while second:
            tmp = second.next

            second.next = pre

            pre = second
            second = tmp
        # 迭代反转完成后，pre就是右半部分新的head
        
        first = head
        while first and pre:
            if first.val != pre.val:
                return False
            first = first.next
            pre = pre.next

        return True
