 此题要求将一个链表的（两个为一组）相邻两个数反转。 1 2 3 4    2 1 4 3
 思路：每两个为一组，由prev指向被操作的组的前一个节点，l1，l2指向两个操作数，next指向本组的下一个节点。由此四个节点结合完成翻转。
 public ListNode SwapPairs(ListNode head) {
       if(head==null||head.next==null)//对于为空链表或只有一个节点的特殊情况
           return head;
        ListNode fakeHead=new ListNode(5);//先定义一个假的头
        fakeHead.next=head;//假头的next为第一组操作数的l1，即head
        ListNode l1;//prev，l1，l2和next四个节点会向下走。
        ListNode l2;
        ListNode prev=fakeHead;//初始化，将prev指向假头
        ListNode ret=head.next;
        ListNode next=head;
        while(next!=null&&next.next!=null)
        {
            l1=next;//上一组的next，即为下一组的两个数的第一个：l1
            l2=next.next;//同上一句
            next=next.next.next;//本组的next为上一组的next（即本组的l1）的next。next
            
            l1.next=next;//开始交换l1与l2.先将l1的next由l2变为了next
            l2.next=l1;//同上，在交换
            prev.next=l2;//同上，在交换
            prev=l1;////这句话是因为：上一组的l1，l2操作后，顺序为l2，l1，则上一组的l1为下一组的prev
        }
        return ret;
    }
