/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
 
 //此题没什么难度，算不上中等。定义两个链表，小于x的和大于等于x的。然后连起来就行
public class Solution {
    public ListNode Partition(ListNode head, int x) {
        ListNode l1=new ListNode(0);//l1和l2是两个假头。
        ListNode t1=l1;//t1和t2负责跟踪到两个链表的最后一个节点
        
        ListNode l2=new ListNode (0);
        ListNode t2=l2;
        if(head==null)//特殊的情况
            return head;
        ListNode t=head;
        while(t!=null)//t从head开始遍历原链表
        {
            if(t.val<x)
            {
                l1.next=t;//小于x就放入第一个链表最后，
                t=t.next;//然后t要等于原链表的下一个
                l1=l1.next;//l1更新到第一个链表的最后一个
                l1.next=null;//l1的下一位暂时设为null
                
                
            }
            else
            {
                l2.next=t;//同上
                t=t.next;
                l2=l2.next;
                l2.next=null;
            }
            
        }
        if(t1.next==null)//如果成立，说明原链表本就没有小于x的节点，则直接返回第二条链表（第二条也可能为空，但照样能返回null）
            return t2.next;
        if(t2.next==null)//同上
          return t1.next;
        l1.next=t2.next;//运行到这句说明l1，l2都有节点，则需要将l1，l2连接。
        return t1.next;
            
    }
}
