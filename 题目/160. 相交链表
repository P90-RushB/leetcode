class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        # 哈希表，存一个链表，然后开始遍历第二个链表。
        # col = set()
        # tmp = headA
        # while tmp:
        #     col.add(tmp)
        #     tmp = tmp.next

        # tmp = headB
        # while tmp:
        #     if tmp in col:
        #         return tmp
        #     tmp = tmp.next
        # return None

        # 方法二，双指针。 两个指针a，b从两个链表头开始，对于a，b一样的：
        # 一个链表遍历到结束时，转到另一条的开头；如果某个时刻a，b一样，代表相交的起始点，
        # 如果遍历完了两个链表那没有相交（a，b当然是同时到结束的，因为链表总长是l1+l2）

        # a = headA
        # b = headB
        
        # a_has_change = b_has_change = False

        # if not a or not b:
        #     return None

        # while True:
        #     if a == b:
        #         return a
        #     a = a.next
        #     b = b.next

        #     if not a:
        #         if not a_has_change:
        #             a = headB
        #             a_has_change = True
        #         else:
        #             return None
        #     if not b:
        #         if not b_has_change:
        #             b_has_change = True
        #             b = headA
        #         else:
        #             return None

    # 双指针的简洁写法
        curA, curB = headA, headB
        while curA != curB:
            curA = curA.next if curA else headB
            curB = curB.next if curB else headA
        return curA