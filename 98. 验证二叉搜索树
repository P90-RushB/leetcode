//方法一。根据对二茬搜索树中序遍历得到的是有序数组。存入list，再对list遍历看是否是从小到大。
List<int> list=new List<int>();
    public bool IsValidBST(TreeNode root) {
      if(root==null)
          return true;
        if(root.left==null&&root.right==null)
            return true;
        InOrderTraversal(root);
        for(int i=1;i<list.Count;i++)
        {
            if(list[i]<=list[i-1])
                return false;
        }
        return true;
        
    }
    public void InOrderTraversal(TreeNode root)
    {
        if(root==null)
            return;
        InOrderTraversal(root.left);
        list.Add(root.val);
        InOrderTraversal(root.right);
    }
    
    
    方法二：
    非递归的中序遍历，这样可以在遍历过程中判断，前一个节点与本节点的大小关系。
     public bool IsValidBST(TreeNode root) {
      if(root==null)
          return true;
        Stack<TreeNode> stack=new Stack<TreeNode>();
        TreeNode pre=null;
        while(root!=null||stack.Count()!=0)
        {
            while(root!=null)
            {
                stack.Push(root);
                root=root.left;
            }
            root=stack.Pop();
            if(pre!=null&&root.val<=pre.val)
                return false;
            pre=root;
            root=root.right;
        }
        return true;
    }
